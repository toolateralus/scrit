// ######################################
// ######################################

// namespaces

// file scoped, declare at top.
namespace my_namespace

namespace my_namespace {
  // do stuff
}

// import all namespaces/modules.
using std::*

// import specific namespace/module
// from a parent.
using std::array


// import as object
using std::raylib as 'raylib'

// ###################################### 
// ###################################### 

// static functions, type associated functions
// struct member functions

// Self type alias inside of type declarations.

struct Type {
  // type associated free function, static.
  func f() {
    
  }
  // type associated member function.
  // does not get copied across instances, also
  // 'static' in a way.
  func f1(self: Self) {
    
  }
  
  // mutable parameter.
  func f2(mut self: Self) {
    
  }
}

// To call a static or type associated function without an instance
Type::f()

// or a method call with explicit self for some reason
let x : Type
Type::f1(x)

// ######################################
// ######################################

// named args to functions and constructors
func f(n : int = 20, n1 : int = 100) { ... }
// use default for first arg, only provide n1
f(n1: 100)

struct SomeType { n : int = 1000, v : bool = true }
let x = SomeType(v: false)

// ######################################
// ######################################

// Type deduction for template types trying to call methods
// or pass as generic base

let arr : array<int>

func contains(a : array, value: object) -> bool {
  for element : a {
    if value == element {
      return true
    }
  }
  return false
}

// pass the array<int> into a function that takes
// array, downcast to template base type.
contains(arr, {})