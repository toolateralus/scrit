using system
using raylib
using std::array
import "mandelbrot_lib.scrit"
if !file_exists("mandelbrot_lib.scrit") {
	println("please execute from examples directory")
	exit(1)
}

struct Vec2 {
	x: float
	y: float
}

let view_pos = Vec2(-0.743643887037151, 0.13182590420533)
let view_size = Vec2(4.0, 2.0)
let width = 800
let height = 400
let mut max_iterations = 100
let mut tex: object

func render_rect(x: int, y: int, size: int) {
	let normal_x = float(x * size) / float(width) - 0.5
	let real = normal_x * view_size.x + view_pos.x
	let normal_y = float(y * size) / float(height) - 0.5
	let imaginary = normal_y * view_size.y + view_pos.y
	let its = mandelbrot_iterations(Complex(real,  imaginary), max_iterations)
	let num = (its * 255) / max_iterations
	let color = [num, num, num, 255]
	draw_rectangle(x * size, y * size, size, size, color)
}

let mut prend_pass = 0
let mut prend_size : int = 0
let mut prend_width = 0
let mut prend_height = 0
let mut prend_x = 0
let mut prend_y = 0
func progressive_render() {
	if prend_pass == 0 {
		prend_size = 1
		for prend_size <= height && prend_size <= width {
			prend_size *= 2
		}
		prend_size /= 2
		prend_width = width / prend_size 
		prend_height = height / prend_size 
		
		for let mut x = 0, x < prend_width, x++ {
			for let mut y = 0, y < prend_height, y++ {
				render_rect(x, y, prend_size)
			}
		}

		prend_pass++
		prend_x = 0
		prend_y = 0
	} else if prend_size > 1 {
		if prend_y == 0 && prend_x == 0 {
			prend_size /= 2
			prend_width = width / prend_size 
			prend_height = height / prend_size 
		}
		if (prend_x.mod(2) != 0) || (prend_y.mod(2) != 0) {
			render_rect(prend_x, prend_y, prend_size)
		}
		prend_x++
		if prend_x > prend_width {
			prend_x = 0
			prend_y++
			if prend_y == prend_height {
				prend_y = 0
				prend_passes++
			}
		}
	}
}


func main() {
	init_window(width, height, "mandelbrot")
	tex = load_render_texture(width, height)
	let mut y = 0
	let mut running = true
	for running {
		running = !window_should_close()
		begin_drawing()
		begin_texture_mode(tex)
		progressive_render()
		end_texture_mode()
		clear_background([0,0,0,255])
		draw_texture(tex, 0, 0, [255,255,255,255])
		end_drawing()
	}
}
main()