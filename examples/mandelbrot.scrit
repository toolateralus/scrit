struct Complex {
  r: float
  i: float
  func tostr(self: Complex) -> string {
    return tostr(self.r) + " + " + tostr(self.i) + "i"
  }
}

func square(self: Complex) -> Complex {
  let r = self.r * self.r - self.i * self.i
  let i = 2.0 * self.i * self.r
  return Complex(r, i)
}

func add(self: Complex, other: Complex) -> Complex {
  return Complex(self.r + other.r, self.i + other.i) 
}

func sqr_mag(self: Complex) -> float {
  return self.r * self.r + self.i * self.i
}

func mandelbrot_iterations(c: Complex) -> int {
  let mut z = Complex()
  let mut res = -1
  for let n = 0, n < 100, n++ {
    if sqr_mag(z) >= 4.0 {
      res = n
      break
    }
    z = z.square().add(c)
  }
  return res
}

let pos_x = -0.6 
let pos_y = 0.0

let size_x = 4.0
let size_y = 2.0

let screen_size_x = 80.0
let screen_size_y = 20.0

for let screen_y = 0.0, screen_y < screen_size_y, screen_y++ {
  let normal_y = screen_y / screen_size_y - 0.5
  let imaginary = normal_y * size_y + pos_y
  for let screen_x = 0.0, screen_x < screen_size_x, screen_x++ {
    let normal_x = screen_x / screen_size_x - 0.5
    let real = normal_x * size_x + pos_x
    let its = mandelbrot_iterations(Complex(real,  imaginary))
    if (its == -1) {
      print("#")
    } else {
      print(".")
    }
  }
  println("")
}