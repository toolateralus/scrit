


// Declare a template object or 'struct' called Vec2
struct Vec2 {
  // we can use default construction
  x: int
  // or provide default values
  y: int = 100
  
  // we can also declare functions aka methods.
  func zero() {
    return Vec2(0, 0)
  }
  
  // just like anonymous objects, we can also declare
  // operator overloads.
  
  // overload + 
  func add(self: Vec2, other: Vec2) -> Vec2 {
    return Vec2(self.x + other.y, self.y + other.y)
  }
  
  // overload ()
  func call(self: Vec2) -> int {
    return 0
  }
  
  // other overloads include
  // mul (*)
  // div (/)
  // sub (-)
  // equals(==)
  // greater (>)
  // less (<)
  // call () (like you're calling a function, where the parameters are the function signature)
  // we plan to have (=) overloading in the future
  // so users can control assignment semantics
}


let instance = Vec2(0, 1)
println(instance)

// type alias.
type Entity = int

struct MyType {
  x: int,
  y: int
  
  // methods always take a 'self' parameter.
  func method(mut self: MyType, x: int) {
    self.x = x
  }
}

// function type alias
type MyFunc = func(int, int) -> MyType