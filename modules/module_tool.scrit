
using system
using std::string
using std::array

func buildScript(name: string) -> string {
  return "sudo clang++ -std=c++2b -shared -fPIC -o /usr/local/scrit/modules/" + name + ".dll " + name + ".cpp" + " -lscrit"
}

func cppBoilerplate(name: string) -> string {
return "#include <scrit/scritmod.hpp>
// provide your function and object definitions here.
// Note that these will stay alive in the language until the using ... statement goes out of scope.
static Value doSomething(std::vector<Value> values) {
  return Value_T::VNULL;
}

// Link your module with your definitions here
// note: if you intend to namespace your module, use _SR_ where there would be a ::.
// so if we wanted std::myStdModule::doSomething
// youd do InitScritModule_funnyModuleName_SR_myStdModule()

extern \"C\" ScritModDef* InitScritModule_" + name + "() {
  ScritModDef *def = CreateModDef();
  *def->description = \"your description here\";
                                                                // return type
                                                                            // parameter types.
  def->AddFunction(\"doSomething\", CREATE_FUNCTION(doSomething, \"string\", {\"string\"}))
  return def;
}"
}

func createModule(name: string) -> int {
  let path = dir_current() + "/" + name
  let cppPath = path + "/" + name + ".cpp"
  let bashPath = path + "/build.sh"
  dir_create(path)
  file_write(bashPath, buildScript())
  file_write(cppPath, cppBoilerplate(name))
  println("module: " + name + " created!")
  return syscall("chmod +x " + bashPath)
}

func() {
  if args.len() > 0 {
    createModule(args[0])
  } else {
    println("provide an argument for your module name.")
  }
}()


