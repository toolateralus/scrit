// This is a set of in-language tests intending to provide some level of testing, where
// the CPP testing is very lacking. It's dependent on the language itself mostly working, 
// but at least gives us a little insight.

struct Tests {
  func test_type_declaration(self: Tests) {
    println("type declarations")
    struct None {}
    type Class = None
    type FunctionPointer = func() -> int
    let n = None()
    let n = Class()
    let f = func() -> int {}
    assert(true)
  }
  func test_literals(self: Tests) {
    println("literals")
    let x = []
    let y = {}
    let n = 0
    let i = false
    let v = 0.0
    let arr : array<int> = [0,1,2]
    assert(true, "literals")
  }
  func test_for_loop(self: Tests) {
    let mut result = false
    for let i = 0, i < 10, ++i {
      if i == 9 {
        result = true
      }
    }
    assert(result, "for let i = 0, i < 10, ++i {}")
    result = false
    for {
      result = true
      break
    }
    assert(result, "for {}")
    result = false
    for true {
      result = true
      break
    }
    assert(result)
  }
  func test_range_based(self: Tests) {
    let arr = [0, 1, 2]
    
    let mut j = 0
    for i : arr {
      assert(i == arr[j])
      j++
    }
    
    let tup_arr = [(0,0), (1,1), (2,2)]
    
    let mut j = 0
    for x,y : tup_arr {
      assert(x + y == j + j)
      j++
    }
    
    let obj = {
      some: int = 0,
      other: bool = true,
    }
    
    let mut j = 0
    for k,v: obj {
      if k == "some" {
        assert(v == 0)
      } else if k == "other" {
        assert(v == true)
      }
      j++
    }
    
  }
  func test_match(self: Tests) {
    match 0 {
      0 => {}
      default => assert(false, "match failed on case 0")
    }
  }
  func test_nested_func(self: Tests) {
    func another(b: bool) -> bool {
      b
    }
    func something(b: bool) -> bool {
      return another(b)
    }
    assert(something(true) == true, "implicit return nested function")
  }
  func test_ctor(self: Tests) {
    struct Something {
      const x : int = 10
    }
    
    let v = Something(100)
    assert(v.x == 100)
  }
  func test_int_math(self: Tests) {
    // TODO: make integers and floats more usable: dividing an int by an int always results in an int.
    // we should be able to do let _ : float = 1.0 / 3, etc.
    let x = 10 * 2 / 3 + 15 / 4 - 100
    assert(x == -91, "integer math failed")
  }
  func test_float_math(self: Tests) {
    // TODO: make integers and floats more usable: dividing an int by an int always results in an int.
    // we should be able to do let _ : float = 1.0 / 3, etc.
    let x = 10.0 * 2.0 / 3.0 + 15.0 / 4.0 - 100.0
    assert(x == -89.583336, "float math failed")
  }
  func test_conditionals(self: Tests) {
    
    if false {
      assert(false, "failed \"if false\" condition")
    } else if false {
      assert(false, "failed \"else if false\" condition")
    } else {
      println("conditional passed")
    }
    if !(10 == 0 * 2 + 1 + 9) {
      assert(false, "failed complex conditional !(10 == 0 * 2 + 1 + 9)")
    } else {
      println("complex conditional passed")
    }
  }
  func test_control_flow(self: Tests) {
    func ret_test() -> int {
      // NOTE: 
      // if we had just written
      
      // return
      // assert(...)
      
      // the interpreter would've attempted to return the assert call.
      // perhaps we should allow semicolons as statement delimiters, even though
      // this is an unrealistic case.
      return 0
      assert(false, "failed to stop executing post-return")
    }
    func cont_test() {
      let mut i = 0
      for i < 10 {
        i++
        continue
        assert(false, "failed to stop executing post-continue")
      }
    }
    func break_test() {
      for {
        break
        assert(false, "failed to stop executing post-break")
      }
    }
    ret_test()
    cont_test()
    break_test()
  }
  
  func test_fn_ptr(self: Tests) {
    func something() -> bool { true }
    let f = something
    assert(f() == true, "function pointer failed.")
  }
  // TODO: 
    // for some reason, the CallOpOverload method
    // in the object cannot find the methods
    // on the type.
  func test_op_overload(self: Tests) {
    struct OpOvr {
      func add(self: OpOvr, other: OpOvr) -> int {
        println("adding : " + tostr(self) + " " + tostr(other))
        0
      }
      func sub(self: OpOvr, other: OpOvr) -> int {
        println("subtracting : " + tostr(self) + " " + tostr(other))
        0
      }
      func div(self: OpOvr, other: OpOvr) -> int {
        println("dividing : " + tostr(self) + " " + tostr(other))
        0
      }
      func mul(self: OpOvr, other: OpOvr) -> int {
        println("multiplying : " + tostr(self) + " " + tostr(other))
      }
      func call(self: OpOvr, arg: int) -> int {
        println("calling : " + tostr(self) + " " + tostr(arg))
        0
      }
    }
    
    let instance = OpOvr()
    
    assert(instance + instance == 0, "add overload failed")
    assert(instance - instance == 0, "sub overload failed")
    assert(instance * instance == 0, "mul overload failed")
    assert(instance / instance == 0, "div overload failed")
    
    assert(instance(10)  == 0, "call overload failed")
  }
  // TODO:
  func test_recursion(self: Tests) {
    func count_down(n: int) -> int {
      if n > 0 { return count_down(n - 1) }
      return n
    }
    assert(count_down(10) == 0, "recursion test failed")
  }
  func run(self: Tests) {
    // self.test_op_overload() :: FAILING
    self.test_recursion()
    
    self.test_fn_ptr()
    self.test_conditionals()
    self.test_control_flow()
    self.test_float_math()
    self.test_int_math()
    self.test_ctor()
    self.test_nested_func()
    self.test_match()
    self.test_type_declaration()
    self.test_for_loop()
    self.test_literals()
    self.test_range_based()
  }
}

let t = Tests()

t.run()
