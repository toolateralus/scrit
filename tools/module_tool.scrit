
using {directory, file} from system

func buildScript(name) {
  return "sudo clang++ -std=c++26 -shared -fPIC -o /usr/local/scrit/modules/" + name + ".dll " + name + ".cpp" + " -lscrit"
}

func cppBoilerplate(name) {
return "#include <scrit/scritmod.hpp>

// provide your function and object definitions here.
// Note that these will stay alive in the language until the using ... statement goes out of scope.
static Value doSomething(std::vector<Value> values) {
  return Value_T::VNULL;
}

// Link your module with your definitions here
extern \"C\" ScritModDef* InitScritModule_" + name + "() {
  ScritModDef *def = CreateModDef();
  *def->description = \"your description here\";
  AddFunction(def, \"doSomething\", &doSomething);
  return def;
}"
}

func createModule(name) {
  
  if name == undefined {
    println("invalid name: was undefined")
    return 1
  } else {
    println("Creating module: " + name)
  }
  
  path = directory.current() + "/" + name
  
  if path == undefined {
    println("invalid path: was undefined")
    return 1
  }
  
  cppPath = path + "/" + name + ".cpp"
  bashPath = path + "/build.sh"
  
  mut err = directory.create(path)
  if (err != undefined) {
    println("dir create error: " + err)
    return 1
  }
  
  err = file.write(bashPath, buildScript())
  if (err != undefined) {
    println("fwrite error: " + err)
    return 1
  }
  
  err = file.write(cppPath, cppBoilerplate(name))
  if (err != undefined) {
    println("fwrite error: " + err)
    return 1
  }
  
  syscall("chmod +x " + bashPath)
  return 0
}

func() {
  if len(args) == 0 {
    println("Must provide a module name.")
    return 1
  }
  println("Are you sure you want to create a module named :" + args[0])
  println("type [y/n] and press enter")
  input = readln()
  if (input == "y") {
    return createModule(args[0])
  } 
  
  return 0
}()


